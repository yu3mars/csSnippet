<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>RollingHash</Title>
			<Shortcut>rollinghash</Shortcut>
			<Description>ローリングハッシュ</Description>
			<Author>Microsoft Corporation</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="csharp">
        <![CDATA[class RollingHash<T> where T : IComparable<T>, IConvertible
    {
        int[] mod = { (int)(1e9 + 7), (int)(1e9 + 9), 1234567891 };
        int[] K = { 1007, 1009, 1013 };
        public T[] S;
        long[,] hash;
        long[,] powTable;

        public RollingHash(T[] S)
        {
            this.S = S;
            hash = new long[mod.Length, S.Length + 1];
            for (int i = 0; i < mod.Length; i++)
            {
                for (int j = S.Length - 1; j >= 0; j--)
                {
                    hash[i, j] = hash[i, j + 1] * K[i];
                    hash[i, j] += Convert.ToInt64(S[j]);
                    hash[i, j] %= mod[i];
                }
            }

            powTable = new long[mod.Length, S.Length + 1];
            for (int i = 0; i < mod.Length; i++)
            {
                powTable[i, 0] = 1;
                for (int j = 1; j < S.Length + 1; j++)
                {
                    powTable[i, j] = (powTable[i, j - 1] * K[i]) % mod[i];
                }
            }
        }

        public long getHash(int t, int start, int end)
        {
            long r = hash[t, start] - hash[t, end] * powTable[t, end - start];
            r %= mod[t];
            if (r < 0) r += mod[t];
            return r;
        }

        public bool isSame(int Astart, int Bstart, int Aend, int Bend)
        {
            int len = Aend - Astart;
            if (len != Bend - Bstart) return false;
            for (int i = 0; i < mod.Length; i++)
            {
                if (getHash(i, Astart, Aend) != getHash(i, Bstart, Bend)) return false;
            }
            return true;
        }

        public bool isSame(int Astart, int Bstart, int Aend, int Bend, RollingHash<T> rh)
        {
            if (rh == null) return isSame(Astart, Bstart, Aend, Bend);
            int len = Aend - Astart;
            if (len != Bend - Bstart) return false;
            for (int i = 0; i < mod.Length; i++)
            {
                if (getHash(i, Astart, Aend) != rh.getHash(i, Bstart, Bend)) return false;
            }
            return true;
        }


        public int compare(int Astart, int Bstart, int Aend, int Bend, RollingHash<T> rh = null)
        {
            int Alen = Aend - Astart;
            int Blen = Bend - Bstart;

            int len = Math.Min(Alen, Blen);
            int maxlen = len + 1;
            int minlen = 0;
            while (minlen + 1 < maxlen)
            {
                int nextlen = (maxlen + minlen) / 2;
                if (isSame(Astart, Bstart, Astart + nextlen, Bstart + nextlen, rh))
                {
                    minlen = nextlen;
                }
                else
                {
                    maxlen = nextlen;
                }
            }

            if (Astart + minlen == Aend)
            {
                if (Bstart + minlen == Bend) return 0;
                else return -1;
            }
            else
            {
                if (Bstart + minlen == Bend) return 1;
                else return S[Astart + minlen].CompareTo(S[Bstart + minlen]);
            }
        }

        public int compare(int Astart, int Bstart)
        {
            if (revSA != null)
            {
                return revSA[Astart].CompareTo(revSA[Bstart]);
            }
            return compare(Astart, Bstart, S.Length, S.Length);
        }

        public int compare(int Astart, int Bstart, RollingHash<T> rh)
        {
            return compare(Astart, Bstart, S.Length, rh.S.Length);
        }

        public int[] SA;
        public int[] revSA;

        public int[] makeSuffixArray()
        {
            SA = new int[S.Length];
            for (int i = 0; i < S.Length; i++)
            {
                SA[i] = i;
            }
            Array.Sort(SA, compare);
            revSA = new int[S.Length];
            for (int i = 0; i < S.Length; i++)
            {
                revSA[SA[i]] = i;
            }
            return SA;
        }

    }
			$selected$ $end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>
